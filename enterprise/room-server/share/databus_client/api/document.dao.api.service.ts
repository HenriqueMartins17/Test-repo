/**
 * databus-server
 * databus-server APIs
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable } from 'rxjs';
import { DocumentOperationRO } from '../model/document.operation.ro';
import { DocumentPropsRO } from '../model/document.props.ro';
import { DocumentRO } from '../model/document.ro';
import { Configuration } from '../configuration';


@Injectable()
export class DocumentDaoApiService {

    protected basePath = 'http://localhost';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();

    constructor(protected httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    // private canConsumeForm(consumes: string[]): boolean {
    //     const form = 'multipart/form-data';
    //     return consumes.includes(form);
    // }

    /**
     * create document operation success
     * create document operation success
     * @param documentName document name
     * @param documentOperationRO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public daoCreateDocumentOperation(documentName: string, documentOperationRO: DocumentOperationRO, ): Observable<AxiosResponse<any>>;
    public daoCreateDocumentOperation(documentName: string, documentOperationRO: DocumentOperationRO, ): Observable<any> {

        if (documentName === null || documentName === undefined) {
            throw new Error('Required parameter documentName was null or undefined when calling daoCreateDocumentOperation.');
        }

        if (documentOperationRO === null || documentOperationRO === undefined) {
            throw new Error('Required parameter documentOperationRO was null or undefined when calling daoCreateDocumentOperation.');
        }

        let headers = {...this.defaultHeaders};

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<any>(`${this.basePath}/databus/dao/documents/${encodeURIComponent(String(documentName))}/operations`,
            documentOperationRO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Create or update document
     * Create or update document
     * @param documentName document name
     * @param documentRO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public daoCreateOrUpdateDocument(documentName: string, documentRO: DocumentRO, ): Observable<AxiosResponse<any>>;
    public daoCreateOrUpdateDocument(documentName: string, documentRO: DocumentRO, ): Observable<any> {

        if (documentName === null || documentName === undefined) {
            throw new Error('Required parameter documentName was null or undefined when calling daoCreateOrUpdateDocument.');
        }

        if (documentRO === null || documentRO === undefined) {
            throw new Error('Required parameter documentRO was null or undefined when calling daoCreateOrUpdateDocument.');
        }

        let headers = {...this.defaultHeaders};

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.put<any>(`${this.basePath}/databus/dao/documents/${encodeURIComponent(String(documentName))}`,
            documentRO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Get document data
     * Get document data
     * @param documentName document name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public daoGetDocumentData(documentName: string, ): Observable<AxiosResponse<any>>;
    public daoGetDocumentData(documentName: string, ): Observable<any> {

        if (documentName === null || documentName === undefined) {
            throw new Error('Required parameter documentName was null or undefined when calling daoGetDocumentData.');
        }

        let headers = {...this.defaultHeaders};

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        // const consumes: string[] = [
        // ];
        return this.httpClient.get<any>(`${this.basePath}/databus/dao/documents/${encodeURIComponent(String(documentName))}/data`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Get new document name
     * Get new document name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public daoGetNewDocumentName(): Observable<AxiosResponse<any>>;
    public daoGetNewDocumentName(): Observable<any> {

        let headers = {...this.defaultHeaders};

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        // const consumes: string[] = [
        // ];
        return this.httpClient.get<any>(`${this.basePath}/databus/dao/documents/name`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * batch update document props
     * batch update document props
     * @param documentPropsRO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public daoUpdateDocumentProps(documentPropsRO: DocumentPropsRO, ): Observable<AxiosResponse<any>>;
    public daoUpdateDocumentProps(documentPropsRO: DocumentPropsRO, ): Observable<any> {

        if (documentPropsRO === null || documentPropsRO === undefined) {
            throw new Error('Required parameter documentPropsRO was null or undefined when calling daoUpdateDocumentProps.');
        }

        let headers = {...this.defaultHeaders};

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.patch<any>(`${this.basePath}/databus/dao/documents/props`,
            documentPropsRO,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
}
