/*
 * APITable Ltd. <legal@apitable.com>
 * Copyright (C)  2022 APITable Ltd. <https://apitable.com>
 *
 * This code file is part of APITable Enterprise Edition.
 *
 * It is subject to the APITable Commercial License and conditional on having a fully paid-up
 * license from APITable.
 *
 * Access to this code file or other code files in this `enterprise` directory and its
 * subdirectories does not constitute permission to use this code or APITable Enterprise Edition
 * features.
 *
 * Unless otherwise noted, all files Copyright Â© 2022 APITable Ltd.
 *
 * For purchase of APITable Enterprise Edition license, please contact <sales@apitable.com>.
 */

package com.apitable.enterprise.vikabilling.controller;

import static com.apitable.shared.util.AssertUtil.verifyNonNullOrEmpty;

import com.apitable.core.exception.BusinessException;
import com.apitable.core.support.ResponseData;
import com.apitable.enterprise.vikabilling.core.DefaultOrderArguments;
import com.apitable.enterprise.vikabilling.core.DryRunArguments;
import com.apitable.enterprise.vikabilling.core.OrderArguments;
import com.apitable.enterprise.vikabilling.enums.DryRunAction;
import com.apitable.enterprise.vikabilling.enums.OrderException;
import com.apitable.enterprise.vikabilling.enums.OrderStatus;
import com.apitable.enterprise.vikabilling.enums.PayChannel;
import com.apitable.enterprise.vikabilling.model.CreateOrderRo;
import com.apitable.enterprise.vikabilling.model.DryRunOrderArgs;
import com.apitable.enterprise.vikabilling.model.OrderDetailVo;
import com.apitable.enterprise.vikabilling.model.OrderPaymentVo;
import com.apitable.enterprise.vikabilling.model.OrderPreview;
import com.apitable.enterprise.vikabilling.model.PayOrderRo;
import com.apitable.enterprise.vikabilling.model.PaymentOrderStatusVo;
import com.apitable.enterprise.vikabilling.service.IOrderV2Service;
import com.apitable.organization.service.IMemberService;
import com.apitable.shared.component.scanner.annotation.ApiResource;
import com.apitable.shared.component.scanner.annotation.GetResource;
import com.apitable.shared.component.scanner.annotation.PostResource;
import com.apitable.shared.context.SessionContext;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Resource;
import jakarta.validation.Valid;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

/**
 * Billing order Api.
 */
@RestController
@Tag(name = "Billing Order API")
@ApiResource
@Slf4j
public class OrderController {

    @Resource
    private IMemberService iMemberService;

    @Resource
    private IOrderV2Service iOrderV2Service;

    @GetResource(path = "/orders", requiredPermission = false)
    @Operation(summary = "Fetch Order List", hidden = true)
    public ResponseData<OrderDetailVo> fetchOrderPageList() {
        return ResponseData.success(null);
    }

    @GetResource(path = "/orders/{orderId}", requiredPermission = false)
    @Operation(summary = "Get Order Details", description = "fetch order detail by id")
    public ResponseData<OrderDetailVo> fetchOrderById(@PathVariable("orderId") String orderId) {
        return ResponseData.success(iOrderV2Service.getOrderDetailByOrderId(orderId));
    }

    /**
     * Test run order.
     */
    @PostResource(path = "/orders/dryRun/generate", requiredPermission = false)
    @Operation(summary = "Test run order", description = "According to the subscription change "
        + "type (new subscription, subscription renewal, subscription change, subscription "
        + "cancellation), preview the orders to be generated by the system in the future")
    public ResponseData<OrderPreview> generateDryRunOrder(
        @RequestBody @Valid DryRunOrderArgs dryRunOrderArgs) {
        if (dryRunOrderArgs.getAction() != null) {
            if (DryRunAction.START_BILLING.name().equalsIgnoreCase(dryRunOrderArgs.getAction())) {
                verifyNonNullOrEmpty(dryRunOrderArgs.getProduct(),
                    "DryRun subscription product should be specified");
                verifyNonNullOrEmpty(dryRunOrderArgs.getSeat(),
                    "DryRun seat number should be specified");
                verifyNonNullOrEmpty(dryRunOrderArgs.getMonth(),
                    "DryRun months should be specified");
            } else if (DryRunAction.RENEW.name().equalsIgnoreCase(dryRunOrderArgs.getAction())) {
                verifyNonNullOrEmpty(dryRunOrderArgs.getProduct(),
                    "DryRun subscription product should be specified");
                verifyNonNullOrEmpty(dryRunOrderArgs.getMonth(),
                    "DryRun months should be specified");
            } else if (DryRunAction.UPGRADE.name().equalsIgnoreCase(dryRunOrderArgs.getAction())) {
                verifyNonNullOrEmpty(dryRunOrderArgs.getProduct(),
                    "DryRun subscription product should be specified");
                verifyNonNullOrEmpty(dryRunOrderArgs.getSeat(),
                    "DryRun product seat number should be specified");
                verifyNonNullOrEmpty(dryRunOrderArgs.getMonth(),
                    "DryRun months should be specified");
            }
        }
        // Generate preview order
        DryRunArguments dryRunArguments = new DryRunArguments(dryRunOrderArgs);
        OrderPreview orderPreview = iOrderV2Service.triggerDryRunOrderGeneration(dryRunArguments);
        return ResponseData.success(orderPreview);
    }

    /**
     * Create Order.
     */
    @PostResource(path = "/orders", requiredPermission = false)
    @Operation(summary = "Create Order")
    public ResponseData<OrderDetailVo> createOrder(@RequestBody @Valid CreateOrderRo data) {
        Long userId = SessionContext.getUserId();
        // Check if the user is in this space
        iMemberService.checkUserIfInSpace(userId, data.getSpaceId());
        final OrderArguments orderArguments = new DefaultOrderArguments(data);
        String orderId = iOrderV2Service.createOrder(orderArguments);
        OrderDetailVo orderDetailVo = iOrderV2Service.getOrderDetailByOrderId(orderId);
        return ResponseData.success(orderDetailVo);
    }

    /**
     * Create Payment Order.
     */
    @PostResource(path = "/orders/{orderId}/payment", requiredPermission = false)
    @Operation(summary = "Create Payment Order")
    @Parameters({
        @Parameter(name = "orderId", description = "order id", required = true, schema =
        @Schema(type = "string"), in = ParameterIn.PATH, example = "SILVER"),
    })
    public ResponseData<OrderPaymentVo> createOrderPayment(@PathVariable("orderId") String orderId,
                                                           @RequestBody @Valid PayOrderRo data) {
        Long userId = SessionContext.getUserId();
        PayChannel channel = PayChannel.of(data.getPayChannel());
        if (channel == null) {
            throw new BusinessException(OrderException.PAY_CHANNEL_ERROR);
        }
        OrderPaymentVo orderPaymentVo =
            iOrderV2Service.createOrderPayment(userId, orderId, channel);
        return ResponseData.success(orderPaymentVo);
    }

    /**
     * Get Order Payment Status.
     */
    @GetResource(path = "/orders/{orderId}/paid", requiredPermission = false)
    @Operation(summary = "Get Order Payment Status", description = "get order paid status when "
        + "client polling")
    @Parameters({
        @Parameter(name = "orderId", description = "order id", required = true, schema =
        @Schema(type = "string"), in = ParameterIn.PATH, example = "SILVER"),
    })
    public ResponseData<PaymentOrderStatusVo> getOrderPaidStatus(
        @PathVariable("orderId") String orderId) {
        OrderStatus orderStatus = iOrderV2Service.getOrderStatusByOrderId(orderId);
        PaymentOrderStatusVo orderPaidStatusVo = new PaymentOrderStatusVo();
        orderPaidStatusVo.setStatus(orderStatus.getName());
        return ResponseData.success(orderPaidStatusVo);
    }

    /**
     * Check Order Payment Status.
     */
    @GetResource(path = "/orders/{orderId}/paidCheck", requiredPermission = false)
    @Operation(summary = "Check Order Payment Status", description = "check order paid status "
        + "when client polling is longer")
    @Parameters({
        @Parameter(name = "orderId", description = "order id", required = true, schema =
        @Schema(type = "string"), in = ParameterIn.PATH, example = "SILVER"),
    })
    public ResponseData<PaymentOrderStatusVo> checkOrderPaidStatus(
        @PathVariable("orderId") String orderId) {
        OrderStatus orderStatus = iOrderV2Service.checkOrderStatus(orderId);
        PaymentOrderStatusVo orderPaidStatusVo = new PaymentOrderStatusVo();
        orderPaidStatusVo.setStatus(orderStatus.getName());
        return ResponseData.success(orderPaidStatusVo);
    }
}
