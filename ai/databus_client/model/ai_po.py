# coding: utf-8

"""
    databus-server

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.23.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from databus_client import schemas  # noqa: F401


class AiPO(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "settings",
            "name",
            "type",
            "prompt",
            "aiId",
            "prologue",
        }
        
        class properties:
            aiId = schemas.StrSchema
            name = schemas.StrSchema
            prologue = schemas.StrSchema
            prompt = schemas.StrSchema
            settings = schemas.StrSchema
            type = schemas.StrSchema
            __annotations__ = {
                "aiId": aiId,
                "name": name,
                "prologue": prologue,
                "prompt": prompt,
                "settings": settings,
                "type": type,
            }
    
    settings: MetaOapg.properties.settings
    name: MetaOapg.properties.name
    type: MetaOapg.properties.type
    prompt: MetaOapg.properties.prompt
    aiId: MetaOapg.properties.aiId
    prologue: MetaOapg.properties.prologue
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["aiId"]) -> MetaOapg.properties.aiId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prologue"]) -> MetaOapg.properties.prologue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prompt"]) -> MetaOapg.properties.prompt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["settings"]) -> MetaOapg.properties.settings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["aiId", "name", "prologue", "prompt", "settings", "type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["aiId"]) -> MetaOapg.properties.aiId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prologue"]) -> MetaOapg.properties.prologue: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prompt"]) -> MetaOapg.properties.prompt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["settings"]) -> MetaOapg.properties.settings: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["aiId", "name", "prologue", "prompt", "settings", "type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        settings: typing.Union[MetaOapg.properties.settings, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        prompt: typing.Union[MetaOapg.properties.prompt, str, ],
        aiId: typing.Union[MetaOapg.properties.aiId, str, ],
        prologue: typing.Union[MetaOapg.properties.prologue, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AiPO':
        return super().__new__(
            cls,
            *_args,
            settings=settings,
            name=name,
            type=type,
            prompt=prompt,
            aiId=aiId,
            prologue=prologue,
            _configuration=_configuration,
            **kwargs,
        )
